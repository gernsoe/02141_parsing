// Open the file that defines the type "expr" we shall use as AST
%{
open GCLTypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> INT
%token <string> STRING
%token PLUS MINUS TIMES DIV POW 
%token AND1 AND2 OR1 OR2 NOT EQ NEQ GT GE LT LE LPAR RPAR LSPAR RSPAR EOF
%token ASSIGN SKIP NEXT IF FI DO OD 
%token CONDITION ELSEIF
%token TRUE FALSE
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right ELSEIF NEXT
%right POW

%left DO
%right OD
%left IF 
%right FI 
%left CONDITION
%left OR1 OR2 
%left AND1 AND2
%left NOT
%left EQ NEQ GT GE LT LE
%left LPAR
%right RPAR

%left ASSIGN
%left PLUS MINUS
%left TIMES DIV
%right RSPAR
%left LSPAR


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <C> start
%type <C> command
%type <GC> guarded
%type <a> arithmetic
%type <b> boolean


// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
command:
	| STRING ASSIGN arithmetic		{ AssignX($1,$3) }
	| arithmetic ASSIGN arithmetic	{ AssignA($1,$3) }
	| SKIP							{ Skip }
	| command NEXT command			{ Next($1,$3) }
	| IF guarded FI					{ Iffi($2) }
	| DO guarded OD					{ Dood($2) }

guarded:
	| boolean CONDITION command		{ Condition($1,$3) }
	| guarded ELSEIF guarded		{ ElseIfExpr($1,$3) }

arithmetic:
	| INT                           { N($1) }
	| STRING						{ X($1) }
	| STRING LSPAR arithmetic RSPAR	{ A($3) }
	| arithmetic PLUS arithmetic    { PlusExpr($1,$3) }
	| arithmetic MINUS arithmetic   { MinusExpr($1,$3) }
	| arithmetic TIMES arithmetic   { TimesExpr($1,$3) }
	| arithmetic DIV arithmetic     { DivExpr($1,$3) }
	| MINUS arithmetic              { UMinusExpr($2) }
	| arithmetic POW arithmetic     { PowExpr($1,$3) }
	| LPAR arithmetic RPAR          { $2 }

boolean:
	| TRUE							{ True }
	| FALSE							{ False }
	| boolean AND1 boolean			{ And1Expr($1,$3) }
	| boolean OR1 boolean			{ Or1Expr($1,$3) }
	| boolean AND2 boolean			{ And2Expr($1,$3) }
	| boolean OR2 boolean			{ Or2Expr($1,$3) }
	| NOT boolean					{ NotExpr($2) }
	| arithmetic EQ arithmetic		{ EqExpr($1,$3) }
	| arithmetic NEQ arithmetic		{ NeqExpr($1,$3) }
	| arithmetic GT arithmetic		{ Gt($1,$3) }
	| arithmetic GE arithmetic		{ Ge($1,$3) }
	| arithmetic LT arithmetic		{ Lt($1,$3) }
	| arithmetic LE arithmetic		{ Le($1,$3) }

%%
