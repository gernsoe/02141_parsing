// Signature file for parser generated by fsyacc
module GCLParser
type token = 
  | TRUE
  | FALSE
  | CONDITION
  | ELSEIF
  | ASSIGN
  | SKIP
  | NEXT
  | IF
  | FI
  | DO
  | OD
  | AND1
  | AND2
  | OR1
  | OR2
  | NOT
  | EQ
  | NEQ
  | GT
  | GE
  | LT
  | LE
  | LPAR
  | RPAR
  | LSPAR
  | RSPAR
  | COMMA
  | EOF
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | POW
  | STRING of (string)
  | INT of (int)
type tokenId = 
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_CONDITION
    | TOKEN_ELSEIF
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_NEXT
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_AND1
    | TOKEN_AND2
    | TOKEN_OR1
    | TOKEN_OR2
    | TOKEN_NOT
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LSPAR
    | TOKEN_RSPAR
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_POW
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_guarded
    | NONTERM_arithmetic
    | NONTERM_boolean
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (C) 
